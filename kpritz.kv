#:import Factory kivy.factory.Factory
#:import join os.path.join
#:import abspath os.path.abspath
#:import log10 math.log10
#:import get_hex_from_color kivy.utils.get_hex_from_color

<WordPart@ColoredLabel>:
    size_hint: None, None
    size: root.texture_size
    font_size: '%dpt' % app.text_size
    center_y: self.parent.center_y

BoxLayout:
    orientation: 'vertical'
    word: app.text[app.position] if app.text else ''
    index: int(log10(len(self.word) + 1) * 2.5)

    FloatLayout:
        id: label_container
        WordPart:
            x: center_label.x - self.width
            text: root.word[:root.index] if app.text else ''

        WordPart:
            id: center_label
            x: label_container.width / 3
            text: root.word[root.index] if app.text else ''
            color: app.hl_color

        WordPart:
            x: center_label.right
            text:
                (root.word[root.index + 1:]
                if len(root.word) > root.index else '')

    ColoredLabel:
        text:
            '%d / %d (%2d%%)' % (
            app.position, len(app.text),
            100. * app.position / len(app.text)) if app.text else ''
        size_hint_y: None
        height: self.texture_size[1]

    BoxLayout:
        size_hint_y: None
        height: '30sp'
        ImageButton:
            source: 'open.png'
            on_press: Factory.OpenFile().open()
        ImageButton:
            source: 'previous_sentence.png'
            on_press: app.previous_sentence()
            disabled: app.position == 0
        ImageButton:
            source: 'previous.png'
            on_press: app.previous()
            disabled: app.position == 0
        ImageButton:
            source: 'play.png'
            on_press: app.play()
            on_release: app.pause()
            disabled: app.position >= len(app.text)
        ImageButton:
            source: 'next.png'
            on_press: app.next()
            disabled: app.position == len(self.text)
        ImageButton:
            source: 'next_sentence.png'
            on_press: app.next_sentence()
            disabled: app.position == len(self.text)
        ImageButton:
            source: 'faster.png'
            on_press: app.speed += 10
            disabled: app.speed == 990
        ImageButton:
            source: 'slower.png'
            on_press: app.speed -= 10
            disabled: app.speed == 10
        Label:
            text: '%3d wpm' % app.speed
            size_hint_x: None
            width: self.texture_size[0]

        Button:
            text: 'Aa'
            on_press: Factory.TextSettings().open()


<OpenFile@Popup>:
    title: 'Select a file'
    size_hint: .9, .9
    BoxLayout:
        orientation: 'vertical'
        FileChooserListView:
            path: app.default_path
            id: fc

        BoxLayout:
            size_hint_y: None
            height: '30sp'
            Button:
                text: 'open'
                disabled: not fc.selection
                on_press:
                    app.open(fc.path, fc.selection[0])
                    root.dismiss()
            Button:
                text: 'cancel'
                on_press:
                    root.dismiss()

<PathSelector@Popup>:
    title: 'Select a default path'
    size_hint: .9, .9
    BoxLayout:
        orientation: 'vertical'
        FileChooserListView:
            path: app.default_path
            id: fc

        BoxLayout:
            size_hint_y: None
            height: '30sp'
            Button:
                text: 'select current dir as default path'
                on_press:
                    app.default_path = abspath(fc.path)
                    root.dismiss()

            Button:
                text: 'cancel'
                on_press:
                    root.dismiss()

<TextSettings@Popup>:
    size_hint: .9, .9
    title: 'text settings'
    opacity: .8

    GridLayout:
        cols: 2
        Label:
            size_hint_y: None
            height: '30sp'
            text: 'text size'
        Slider:
            size_hint_y: None
            height: '30sp'
            min: 10
            max: 500
            value: app.text_size
            on_value: app.text_size = self.value

        Label:
            text: 'background color'

        ColorPicker:
            color: app.bg_color
            on_color: app.bg_color = self.color

        Label:
            text: 'foreground color'

        ColorPicker:
            color: app.fg_color
            on_color: app.fg_color = self.color

        Label:
            text: 'highlight color'

        ColorPicker:
            color: app.hl_color
            on_color: app.hl_color = self.color

        Label:
            size_hint_y: None
            height: '30sp'
            text: 'default path'
        Button:
            size_hint_y: None
            height: '30sp'
            text: app.default_path
            on_press: Factory.PathSelector().open()

        Widget:
            size_hint_y: None
            height: '30sp'
            id: span
            Button:
                text: 'close'
                pos: span.pos
                size: span.parent.width, span.height
                on_press: root.dismiss()

<ImageButton@Button>:
    source: ''
    Image:
        center: root.center
        source: join('data', root.source) if root.source else ''
        size: root.size

<ColoredLabel@Label>:
    canvas.before:
        Color:
            rgba: app.bg_color
        Rectangle:
            pos: self.pos
            size: self.size
    color: app.fg_color

<ErrorPopup@Popup>:
    title: 'unable to load book'
    size_hint: .9, .9
    message: ''

    BoxLayout:
        orientation: 'vertical'
        Label:
            size_hint_y: None
            height: self.height
            text_size: self.width, None
            text: 'Error message was:'

        ScrollView:
            Label:
                size_hint_y: None
                height: self.height
                text_size: self.width, None
                text: root.message
