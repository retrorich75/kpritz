#:import Factory kivy.factory.Factory
#:import join os.path.join
#:import abspath os.path.abspath
#:import log10 math.log10
#:import hex_from_color kivy.utils.get_hex_from_color
#:import color_from_hex kivy.utils.get_color_from_hex
#:import abspath os.path.basename

#:set button_height '48dp'

<WordPart@ColoredLabel>:
    size_hint: None, None
    size: root.texture_size
    font_size: '%dpt' % app.config .getfloat('settings', 'text_size')
    center_y: self.parent.center_y

<ResponsiveGrid@BoxLayout>:
    size_hint_x: 1 if app.vertical else 2
    orientation: 'vertical' if app.vertical else 'horizontal'

BoxLayout:
    orientation: 'vertical'
    word: app.text[app.position] if app.text else ''
    index: int(log10(len(self.word) + 1) * 2.5)

    FloatLayout:
        canvas.before:
            Color:
                rgba: color_from_hex(app.config .get('settings', 'bg_color'))
            Rectangle:
                pos: self.pos
                size: self.size
        id: label_container
        Label:
            canvas.before:
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, None
            text_size: self.width, None
            font_size: app.config .getfloat('settings', 'context_font_size')
            color: color_from_hex(app.config .get('settings', 'context_color'))
            text:
                ' '.join(
                app.text[max(0, app.position - app.config .getint('settings', 'context_lenght')):app.position]
                ) if app.config .getboolean('settings', 'show_context') and play.state == 'normal' else ''
            y: center_label.top

        WordPart:
            x: center_label.x - self.width
            text: root.word[:root.index] if app.text else ''

        WordPart:
            canvas.before:
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: center_label
            center_x: label_container.width / 3
            center_y: root.center_y
            text: root.word[root.index] if app.text else ''
            color: color_from_hex(app.config .get('settings', 'hl_color'))
            size_hint: None, None
            width: self.texture_size[0]
            height: self.texture_size[1]

        WordPart:
            x: center_label.right
            text:
                (root.word[root.index + 1:]
                if len(root.word) > root.index else '')

        Label:
            text_size: self.width, None
            font_size: app.config .getfloat('settings', 'context_font_size')
            color: color_from_hex(app.config .get('settings', 'context_color'))
            text:
                ' '.join(
                app.text[app.position + 1:app.position + app.config .getint('settings', 'context_lenght')]
                ) if app.config .getboolean('settings', 'show_context') and play.state == 'normal' else ''
            top: center_label.y
            size_hint: 1, None

    ColoredLabel:
        text:
            '%d / %d (%2d%%)' % (
            app.position, len(app.text),
            100. * app.position / len(app.text)) if app.text else ''
        size_hint_y: None
        height: self.texture_size[1]

    BoxLayout:
        size_hint_y: None
        height: '100sp' if app.vertical else '60sp'
        ImageButton:
            source: 'open.png'
            on_press: Factory.OpenFile().open()
        ResponsiveGrid:
            ImageButton:
                source: 'previous_sentence.png'
                on_press: app.previous_sentence()
                disabled: app.position == 0
            ImageButton:
                source: 'previous.png'
                on_press: app.previous()
                disabled: app.position == 0
        ImageButton:
            id: play
            source: 'play.png'
            on_press: app.play()
            on_release: app.pause()
            disabled: app.position >= len(app.text)
        ResponsiveGrid:
            ImageButton:
                source: 'next.png'
                on_press: app.next()
                disabled: app.position == len(self.text)
            ImageButton:
                source: 'next_sentence.png'
                on_press: app.next_sentence()
                disabled: app.position == len(self.text)
        ResponsiveGrid:
            ImageButton:
                source: 'faster.png'
                on_press:
                    app.config.set(
                    'settings', 'speed', app.config .getint('settings', 'speed') + 10)
                disabled: app.config .getint('settings', 'speed') == 990
            ImageButton:
                source: 'slower.png'
                on_press:
                    app.config.set(
                    'settings', 'speed', app.config .getint('settings', 'speed') - 10)
                disabled:
                    app.config .getint('settings', 'speed') == 10
        Label:
            text: '%3d wpm' % app.config .getint('settings', 'speed')
            size_hint_x: None
            width: self.texture_size[0]

        Button:
            text: 'Aa'
            on_press: Factory.TextSettings().open()


<OpenFile@Popup>:
    title: 'Select a file'
    size_hint: .9, .9
    TabbedPanel:
        do_default_tab: False
#        TabbedPanelItem:
#            text: 'Recent'
#            BoxLayout:
#                orientation: 'vertical'
#                ListView:
#                    adapter:
#                        Factory.ListAdapter(
#                        cls=Factory.ToggleButton,
#                        data=[{
#                        'text': abspath(x),
#                        'group': 'book',
#                        } for x in app.config .options('books')])
#                BoxLayout:
#                    size_hint_y: None
#                    height: button_height
#                    Button:
#                        text: 'open'
#                        on_press:
#                            app.open(recent_list.selection)
#                    Button:
#                        text: 'cancel'
#                        on_press:
#                            root.dismiss()
#                            root.dismiss()
#
        TabbedPanelItem:
            text: "Browse"
            BoxLayout:
                orientation: 'vertical'
                FileChooserListView:
                    path: app.config .get('settings', 'default_path')
                    id: fc

                BoxLayout:
                    size_hint_y: None
                    height: button_height
                    Button:
                        text: 'open'
                        disabled: not fc.selection
                        on_press:
                            app.open(fc.path, fc.selection[0])
                            root.dismiss()
                    Button:
                        text: 'cancel'
                        on_press:
                            root.dismiss()
<PathSelector@Popup>:
    title: 'Select a default path'
    size_hint: .9, .9
    BoxLayout:
        orientation: 'vertical'
        FileChooserListView:
            path: app.config .get('settings', 'default_path')
            id: fc

        BoxLayout:
            size_hint_y: None
            height: button_height
            Button:
                text: 'select current dir as default path'
                on_press:
                    app.config.set('settings', 'default_path', abspath(fc.path))
                    root.dismiss()

            Button:
                text: 'cancel'
                on_press:
                    root.dismiss()

<ColorButton@Button>:
    target: ''
    size_hint_y: None
    height:button_height
    canvas.after:
        Color:
            rgba:
                color_from_hex(
                app.config .get('settings', self.target)
                ) if self.target else (0, 0, 0, 0)
        Rectangle:
            size: self.width - 4, self.height - 4
            pos: self.x + 2, self.y + 2
    on_press:
        s = Factory.ColorSelector()
        s.target = self.target
        s.open()

<ColorSelector@Popup>:
    target: ''
    title: 'Select a color'

    BoxLayout:
        orientation: 'vertical'
        ColorPicker:
            id: cp
            color:
                color_from_hex(
                app.config .get('settings', root.target)
                ) if root.target else (0, 0, 0, 0)

        BoxLayout:
            size_hint_y: None
            height: button_height
            Button:
                text: 'ok'
                on_press:
                    root.target and app.config.set('settings', root.target,  hex_from_color(cp.color))
                    root.dismiss()

            Button:
                text: 'cancel'
                on_press:
                    root.dismiss()

<SettingsLabel@Label>:
    size_hint_y: None
    height: button_height

<TextSettings@Popup>:
    size_hint: .9, .9
    title: 'text settings'
    opacity: .8

    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            GridLayout:
                size_hint_y: None
                height: self.minimum_height
                cols: 2
                Label:
                    size_hint_y: None
                    height: button_height
                    text: 'text size'
                Slider:
                    size_hint_y: None
                    height: button_height
                    min: 10
                    max: 500
                    value: app.config .getfloat('settings', 'text_size')
                    on_value: app.config.set('settings', 'text_size', self.value)

                SettingsLabel:
                    text: 'background color'

                ColorButton:
                    target: 'bg_color'

                SettingsLabel:
                    text: 'foreground color'

                ColorButton:
                    target: 'fg_color'

                SettingsLabel:
                    text: 'highlight color'

                ColorButton:
                    target: 'hl_color'

                SettingsLabel:
                    size_hint_y: None
                    height: button_height
                    text: 'default path'
                Button:
                    size_hint_y: None
                    height: button_height
                    text: app.config .get('settings', 'default_path')
                    on_press: Factory.PathSelector().open()

                SettingsLabel:
                    size_hint_y: None
                    height: button_height
                    text: 'show context on pause'
                Switch:
                    size_hint_y: None
                    height: button_height
                    active: app.config .getboolean('settings', 'show_context')
                    on_active: app.config.set('settings', 'show_context', self.active)
                Label:
                    size_hint_y: None
                    height: button_height
                    text: 'context lenght: %.2f' % app.config .getint('settings', 'context_lenght')
                Slider:
                    size_hint_y: None
                    height: button_height
                    min: 10
                    max: 200
                    value: app.config .getint('settings', 'context_lenght')
                    on_value: app.config.set('settings', 'context_lenght', int(self.value))
                    step: 1
                Label:
                    size_hint_y: None
                    height: button_height
                    text: 'context font size: %.2f' % app.config .getfloat('settings', 'context_font_size')
                Slider:
                    size_hint_y: None
                    height: button_height
                    min: 10
                    max: 50
                    value: app.config .getfloat('settings', 'context_font_size')
                    on_value: app.config.set('settings', 'context_font_size', self.value)

                SettingsLabel:
                    text: 'context color'

                ColorButton:
                    target: 'context_color'

                Widget:
                Widget:

        Button:
            text: 'close'
            size_hint_y: None
            height: button_height
            on_press: root.dismiss()

<ImageButton@Button>:
    source: ''
    Image:
        center: root.center
        source: join('data', root.source) if root.source else ''
        size: root.size

<ColoredLabel@Label>:
    color: color_from_hex(app.config .get('settings', 'fg_color'))

<ErrorPopup@Popup>:
    title: 'unable to load book'
    size_hint: .9, .9
    message: ''

    BoxLayout:
        orientation: 'vertical'
        Label:
            size_hint_y: None
            height: self.height
            text_size: self.width, None
            text: 'Error message was:'

        ScrollView:
            Label:
                size_hint_y: None
                height: self.height
                text_size: self.width, None
                text: root.message
